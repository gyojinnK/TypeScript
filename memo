[ Type Annotations - functions ]
  - 함수를 정의할 때 파라미터와 반환값에 타입을 지정
  - 함수의 종류(선언적 함수, 익명함수, 람다함수)에 따라 타입 지정에 대한 표현에는 차이가 있음
  - 함수의 파라미터를 정의할 때 선택적 매개변수(Optional Parameter)를 지정
  ex)
    - 선언적 함수
    functino add(n1 : number, n2 : number) : number{
      return n1 + n2;
    }
    
    - 익명함수
    const add = function(n1 : number, n2 : number) : number{
      return n1 + n2;
    }
    
    - 람다 함수
    const add : (n1 : number, n2 : number) => number = (n1 : number, n2 : number) : number =>{
      return n1 + n2;
    }
    
  - 함수 오버로딩 가능
    ex) function add(firstParam : string, secondParam : string) : string;
        function add(firstParam : number, secondParam : number) : number;

[ Inference Around Funcitons ]
  - 함수의 파라미터를 정의할 때 각 파라미터의 타입을 지정하지 않으면 "any" 타입의 파라미터 지점
  - 함수의 반환값에 대한 return 실행문에 따라 타입 추론(Type Inference) 적용
  - 파라미터에 타입을 지정하지 않으면 일반 변수와 마찬가지로 암묵적인 "any" 타입의 적용으로 경고 사항임.
  - 반환값의 경우 return 구문으로 명시적인 타입의 유추가 가능.
  ex)
    const findArea = function(width : number, height : number) : number{
      return width * height;
    }
    ==
    const findArea = (width : nubmer, height : number) : number => {
      return width * height;
    }

    const findArea = function(width : number, height: number) {
      return width * height; => number
    }
    
  - 함수의 반환값이 없을 경우 void
  - 함수의 반환값으로 정의 가능한 never타입은 절대 발생하지 않는 값의 타입을 나타냄
  - never타입은 어떤 변수에도 대입 될 수 있지만 never 타입에는 어떤 차입의 값도 대입될 수 없다.
  ex)
    let accountBalance : number = 1000;
    function overdraftError(message? : string) : never {
      throw Error(message);
    }

[ Typed Array ]
  - 배열도 일반 변수와 마찬가지의 타입 시스템이 적용되며 타입의 명시적 초기화를 통한 타입 지정 가능
  - 타입을 정하지 않는다면 "any"로 자동 지정
  - 배열에 서로 다른 타입의 요소를 저장하는 것이 가능하고 이를 타입으로 지정할 수 있다.
  - 서로 다른 타입의 요소로 타입이 지정되면 해당 배열에는 순서에 상관없이 지정된 타입들의 요소 저장 가능
  ex)
    const myAry = ['TypeScript', 2023];
    // const myAry : (string | number)[] = [];

[ Tuples ]
  - 튜플을 이용하면 배열의 요소 수와 각 요소에 대한 타입을 지정할 수 있음
  - 튜플은 정해진 길이에 맞지 않으면 에러가 발생함, 하지만 push()를 이용하여 튜플의 규칙을 무시 가능
  - 서로 다른 타입의 요소를 갖는 배열은 순서에 상관없이 데이터를 넣을 수 있는 반면 튜플은 정해진 순서에 맞게 넣음
  - 튜플 타입은 배열보다 저장되는 요소에 순서와 수에 제약을 두고자 할 때 사용
  ex)
    const tuples : [string, number] = ['Kang', 30];
    tuples[0] = 'Park';  // Ok
    // tuples[0] = 50; // Type '50' is not assignable to type 'string'

    tuples[1] = 50;
    console.log(tuples);  // ['Park', 50]

    tuples.push(100);
    console.log(tuples);  // ['Park', 50, 100]

[ Generics ]
  - 재사용 가능한 클래스, 함수를 만들기 위해 다양한 타입에서 사용 가능 하도록 하는 것
  - 제네릭을 이용하면 모든 타입의 객체를 다루면서 객체 타입의 무결성을 유지할 수 있음
  - 제네릭을 총해 클래스나 함수 내부에서 사용되는 특정 데이터의 타입을 외부에서 지정함
  - 제네릭이 적용된 대상(클래스, 함수, 인터페이스)은 선언 시점이 아닌 생성 시점에 사용하는 타입을 결정

[ Type alias ]
  - 새로운 타입을 정의하는 방법은 type alias와 interface를 정의하는 두 가지 방식이 조냊
  - type alias를 이용하면 객체, 공용체(Union), 튜플(Tuple), 기본 타입에 별칭을 생성할 수 있음
  - type alias도 제네릭의 사용이 가능하며, 스스로 참조하는 것도 가능

[ enum type (열거형 타입) ]
  - 열거형 타입은 상수들을 관리하기 위한 객체로 상수의 집합을 정의. (사용자 정의 상수)
  - 일반 객체는 속성의 변경을 허용하지만 열거형은 송석의 변경을 허용하지 않음
  - 열거형은 속성은 기본적으로 숫자, 문자열만 허용
  - 열거형을 이용하면 상수의 수를 제한할 수 있으며 코드의 가독성을 높일 수 있음
  - reverse mapping기능을 제공함
  ex)
    enum ArrowKey{
      UP = 1,
      Down,
      Left = 20,
      Right,
    }

    console.log(ArrowKey);

    <output>
    {
      '1':'Up',
      '2':'Down',
      '20':'Left',
      '21':'Right',
      Up: 1,
      Down: 2,
      Left: 20,
      Right: 21,
    }               //reverse mapping
    </output>

    console.log(ArrowKey.Left); ==> 20
    console.log(ArrowKey[20]); ==> Left
    
  - enum(열거형 타입)은 자바스크립트로 컴파일 될 때 객체화함.
  - enum 앞에 const가 붙으면 컴파일시 객체화하지 않으며 값을 통한 키값을 찾는 것(reverse mapping)이 불가능해짐, 상수들만 딱 모아서 사용할 수 있는 형태가 돼버림